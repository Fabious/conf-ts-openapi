/**
 * Generated by @openapi-codegen
 *
 * @version 1.0.17
 */
import type * as Fetcher from "./petstoreFetcher";
import { petstoreFetch } from "./petstoreFetcher";
import type * as Schemas from "./petstoreSchemas";
import type { ClientErrorStatus, ServerErrorStatus } from "./petstoreUtils";

export type UpdatePetError = Fetcher.ErrorWrapper<undefined>;

export type UpdatePetVariables = {
  body: Schemas.Pet;
};

/**
 * Update an existing pet by Id
 */
export const updatePet = (
  variables: UpdatePetVariables,
  signal?: AbortSignal
) =>
  petstoreFetch<Schemas.Pet, UpdatePetError, Schemas.Pet, {}, {}, {}>({
    url: "/pet",
    method: "put",
    ...variables,
    signal,
  });

export type AddPetError = Fetcher.ErrorWrapper<undefined>;

export type AddPetVariables = {
  body: Schemas.Pet;
};

/**
 * Add a new pet to the store
 */
export const addPet = (variables: AddPetVariables, signal?: AbortSignal) =>
  petstoreFetch<Schemas.Pet, AddPetError, Schemas.Pet, {}, {}, {}>({
    url: "/pet",
    method: "post",
    ...variables,
    signal,
  });

export type FindPetsByStatusQueryParams = {
  /**
   * Status values that need to be considered for filter
   *
   * @default available
   */
  status?: "available" | "pending" | "sold";
};

export type FindPetsByStatusError = Fetcher.ErrorWrapper<undefined>;

export type FindPetsByStatusResponse = Schemas.Pet[];

export type FindPetsByStatusVariables = {
  queryParams?: FindPetsByStatusQueryParams;
};

/**
 * Multiple status values can be provided with comma separated strings
 */
export const findPetsByStatus = (
  variables: FindPetsByStatusVariables,
  signal?: AbortSignal
) =>
  petstoreFetch<
    FindPetsByStatusResponse,
    FindPetsByStatusError,
    undefined,
    {},
    FindPetsByStatusQueryParams,
    {}
  >({ url: "/pet/findByStatus", method: "get", ...variables, signal });

export type FindPetsByTagsQueryParams = {
  /**
   * Tags to filter by
   */
  tags?: string[];
};

export type FindPetsByTagsError = Fetcher.ErrorWrapper<undefined>;

export type FindPetsByTagsResponse = Schemas.Pet[];

export type FindPetsByTagsVariables = {
  queryParams?: FindPetsByTagsQueryParams;
};

/**
 * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
 */
export const findPetsByTags = (
  variables: FindPetsByTagsVariables,
  signal?: AbortSignal
) =>
  petstoreFetch<
    FindPetsByTagsResponse,
    FindPetsByTagsError,
    undefined,
    {},
    FindPetsByTagsQueryParams,
    {}
  >({ url: "/pet/findByTags", method: "get", ...variables, signal });

export type GetPetByIdPathParams = {
  /**
   * ID of pet to return
   *
   * @format int64
   */
  petId: number;
};

export type GetPetByIdError = Fetcher.ErrorWrapper<undefined>;

export type GetPetByIdVariables = {
  pathParams: GetPetByIdPathParams;
};

/**
 * Returns a single pet
 */
export const getPetById = (
  variables: GetPetByIdVariables,
  signal?: AbortSignal
) =>
  petstoreFetch<
    Schemas.Pet,
    GetPetByIdError,
    undefined,
    {},
    {},
    GetPetByIdPathParams
  >({ url: "/pet/{petId}", method: "get", ...variables, signal });

export type UpdatePetWithFormPathParams = {
  /**
   * ID of pet that needs to be updated
   *
   * @format int64
   */
  petId: number;
};

export type UpdatePetWithFormQueryParams = {
  /**
   * Name of pet that needs to be updated
   */
  name?: string;
  /**
   * Status of pet that needs to be updated
   */
  status?: string;
};

export type UpdatePetWithFormError = Fetcher.ErrorWrapper<undefined>;

export type UpdatePetWithFormVariables = {
  pathParams: UpdatePetWithFormPathParams;
  queryParams?: UpdatePetWithFormQueryParams;
};

export const updatePetWithForm = (
  variables: UpdatePetWithFormVariables,
  signal?: AbortSignal
) =>
  petstoreFetch<
    undefined,
    UpdatePetWithFormError,
    undefined,
    {},
    UpdatePetWithFormQueryParams,
    UpdatePetWithFormPathParams
  >({ url: "/pet/{petId}", method: "post", ...variables, signal });

export type DeletePetPathParams = {
  /**
   * Pet id to delete
   *
   * @format int64
   */
  petId: number;
};

export type DeletePetHeaders = {
  api_key?: string;
};

export type DeletePetError = Fetcher.ErrorWrapper<undefined>;

export type DeletePetVariables = {
  headers?: DeletePetHeaders;
  pathParams: DeletePetPathParams;
};

export const deletePet = (
  variables: DeletePetVariables,
  signal?: AbortSignal
) =>
  petstoreFetch<
    undefined,
    DeletePetError,
    undefined,
    DeletePetHeaders,
    {},
    DeletePetPathParams
  >({ url: "/pet/{petId}", method: "delete", ...variables, signal });

export type UploadFilePathParams = {
  /**
   * ID of pet to update
   *
   * @format int64
   */
  petId: number;
};

export type UploadFileQueryParams = {
  /**
   * Additional Metadata
   */
  additionalMetadata?: string;
};

export type UploadFileError = Fetcher.ErrorWrapper<undefined>;

export type UploadFileVariables = {
  body?: Blob;
  pathParams: UploadFilePathParams;
  queryParams?: UploadFileQueryParams;
};

export const uploadFile = (
  variables: UploadFileVariables,
  signal?: AbortSignal
) =>
  petstoreFetch<
    Schemas.ApiResponse,
    UploadFileError,
    Blob,
    {},
    UploadFileQueryParams,
    UploadFilePathParams
  >({ url: "/pet/{petId}/uploadImage", method: "post", ...variables, signal });

export type GetInventoryError = Fetcher.ErrorWrapper<undefined>;

export type GetInventoryResponse = {
  [key: string]: number;
};

/**
 * Returns a map of status codes to quantities
 */
export const getInventory = (signal?: AbortSignal) =>
  petstoreFetch<GetInventoryResponse, GetInventoryError, undefined, {}, {}, {}>(
    { url: "/store/inventory", method: "get", signal }
  );

export type PlaceOrderError = Fetcher.ErrorWrapper<undefined>;

export type PlaceOrderVariables = {
  body?: Schemas.Order;
};

/**
 * Place a new order in the store
 */
export const placeOrder = (
  variables: PlaceOrderVariables,
  signal?: AbortSignal
) =>
  petstoreFetch<Schemas.Order, PlaceOrderError, Schemas.Order, {}, {}, {}>({
    url: "/store/order",
    method: "post",
    ...variables,
    signal,
  });

export type GetOrderByIdPathParams = {
  /**
   * ID of order that needs to be fetched
   *
   * @format int64
   */
  orderId: number;
};

export type GetOrderByIdError = Fetcher.ErrorWrapper<undefined>;

export type GetOrderByIdVariables = {
  pathParams: GetOrderByIdPathParams;
};

/**
 * For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
 */
export const getOrderById = (
  variables: GetOrderByIdVariables,
  signal?: AbortSignal
) =>
  petstoreFetch<
    Schemas.Order,
    GetOrderByIdError,
    undefined,
    {},
    {},
    GetOrderByIdPathParams
  >({ url: "/store/order/{orderId}", method: "get", ...variables, signal });

export type DeleteOrderPathParams = {
  /**
   * ID of the order that needs to be deleted
   *
   * @format int64
   */
  orderId: number;
};

export type DeleteOrderError = Fetcher.ErrorWrapper<undefined>;

export type DeleteOrderVariables = {
  pathParams: DeleteOrderPathParams;
};

/**
 * For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
 */
export const deleteOrder = (
  variables: DeleteOrderVariables,
  signal?: AbortSignal
) =>
  petstoreFetch<
    undefined,
    DeleteOrderError,
    undefined,
    {},
    {},
    DeleteOrderPathParams
  >({ url: "/store/order/{orderId}", method: "delete", ...variables, signal });

export type CreateUserError = Fetcher.ErrorWrapper<{
  status: ClientErrorStatus | ServerErrorStatus;
  payload: Schemas.User;
}>;

export type CreateUserVariables = {
  body?: Schemas.User;
};

/**
 * This can only be done by the logged in user.
 */
export const createUser = (
  variables: CreateUserVariables,
  signal?: AbortSignal
) =>
  petstoreFetch<undefined, CreateUserError, Schemas.User, {}, {}, {}>({
    url: "/user",
    method: "post",
    ...variables,
    signal,
  });

export type CreateUsersWithListInputError = Fetcher.ErrorWrapper<undefined>;

export type CreateUsersWithListInputRequestBody = Schemas.User[];

export type CreateUsersWithListInputVariables = {
  body?: CreateUsersWithListInputRequestBody;
};

/**
 * Creates list of users with given input array
 */
export const createUsersWithListInput = (
  variables: CreateUsersWithListInputVariables,
  signal?: AbortSignal
) =>
  petstoreFetch<
    Schemas.User,
    CreateUsersWithListInputError,
    CreateUsersWithListInputRequestBody,
    {},
    {},
    {}
  >({ url: "/user/createWithList", method: "post", ...variables, signal });

export type LoginUserQueryParams = {
  /**
   * The user name for login
   */
  username?: string;
  /**
   * The password for login in clear text
   */
  password?: string;
};

export type LoginUserError = Fetcher.ErrorWrapper<undefined>;

export type LoginUserVariables = {
  queryParams?: LoginUserQueryParams;
};

export const loginUser = (
  variables: LoginUserVariables,
  signal?: AbortSignal
) =>
  petstoreFetch<
    string,
    LoginUserError,
    undefined,
    {},
    LoginUserQueryParams,
    {}
  >({ url: "/user/login", method: "get", ...variables, signal });

export type LogoutUserError = Fetcher.ErrorWrapper<undefined>;

export const logoutUser = (signal?: AbortSignal) =>
  petstoreFetch<undefined, LogoutUserError, undefined, {}, {}, {}>({
    url: "/user/logout",
    method: "get",
    signal,
  });

export type GetUserByNamePathParams = {
  /**
   * The name that needs to be fetched. Use user1 for testing.
   */
  username: string;
};

export type GetUserByNameError = Fetcher.ErrorWrapper<undefined>;

export type GetUserByNameVariables = {
  pathParams: GetUserByNamePathParams;
};

export const getUserByName = (
  variables: GetUserByNameVariables,
  signal?: AbortSignal
) =>
  petstoreFetch<
    Schemas.User,
    GetUserByNameError,
    undefined,
    {},
    {},
    GetUserByNamePathParams
  >({ url: "/user/{username}", method: "get", ...variables, signal });

export type UpdateUserPathParams = {
  /**
   * name that need to be deleted
   */
  username: string;
};

export type UpdateUserError = Fetcher.ErrorWrapper<undefined>;

export type UpdateUserVariables = {
  body?: Schemas.User;
  pathParams: UpdateUserPathParams;
};

/**
 * This can only be done by the logged in user.
 */
export const updateUser = (
  variables: UpdateUserVariables,
  signal?: AbortSignal
) =>
  petstoreFetch<
    undefined,
    UpdateUserError,
    Schemas.User,
    {},
    {},
    UpdateUserPathParams
  >({ url: "/user/{username}", method: "put", ...variables, signal });

export type DeleteUserPathParams = {
  /**
   * The name that needs to be deleted
   */
  username: string;
};

export type DeleteUserError = Fetcher.ErrorWrapper<undefined>;

export type DeleteUserVariables = {
  pathParams: DeleteUserPathParams;
};

/**
 * This can only be done by the logged in user.
 */
export const deleteUser = (
  variables: DeleteUserVariables,
  signal?: AbortSignal
) =>
  petstoreFetch<
    undefined,
    DeleteUserError,
    undefined,
    {},
    {},
    DeleteUserPathParams
  >({ url: "/user/{username}", method: "delete", ...variables, signal });

export const operationsByTag = {
  pet: {
    updatePet,
    addPet,
    findPetsByStatus,
    findPetsByTags,
    getPetById,
    updatePetWithForm,
    deletePet,
    uploadFile,
  },
  store: { getInventory, placeOrder, getOrderById, deleteOrder },
  user: {
    createUser,
    createUsersWithListInput,
    loginUser,
    logoutUser,
    getUserByName,
    updateUser,
    deleteUser,
  },
};
