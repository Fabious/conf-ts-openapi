// tslint:disable
/**
 * Swagger Petstore
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    Pet,
    PetFromJSON,
    PetToJSON,
} from '../models';

export interface ListPetsRequest {
    limit?: number;
}

export interface ShowPetByIdRequest {
    petId: string;
}


/**
 * Create a pet
 */
function createPetsRaw<T>( requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/pets`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Create a pet
*/
export function createPets<T>( requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return createPetsRaw( requestConfig);
}

/**
 * List all pets
 */
function listPetsRaw<T>(requestParameters: ListPetsRequest, requestConfig: runtime.TypedQueryConfig<T, Array<Pet>> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.limit !== undefined) {
        queryParameters['limit'] = requestParameters.limit;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/pets`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(PetFromJSON), text);
    }

    return config;
}

/**
* List all pets
*/
export function listPets<T>(requestParameters: ListPetsRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<Pet>>): QueryConfig<T> {
    return listPetsRaw(requestParameters, requestConfig);
}

/**
 * Info for a specific pet
 */
function showPetByIdRaw<T>(requestParameters: ShowPetByIdRequest, requestConfig: runtime.TypedQueryConfig<T, Pet> = {}): QueryConfig<T> {
    if (requestParameters.petId === null || requestParameters.petId === undefined) {
        throw new runtime.RequiredError('petId','Required parameter requestParameters.petId was null or undefined when calling showPetById.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/pets/{petId}`.replace(`{${"petId"}}`, encodeURIComponent(String(requestParameters.petId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(PetFromJSON(body), text);
    }

    return config;
}

/**
* Info for a specific pet
*/
export function showPetById<T>(requestParameters: ShowPetByIdRequest, requestConfig?: runtime.TypedQueryConfig<T, Pet>): QueryConfig<T> {
    return showPetByIdRaw(requestParameters, requestConfig);
}

